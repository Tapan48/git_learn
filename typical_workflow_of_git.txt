

typical workflow of git

1. clone the repository
2. create a new branch
3. make changes to the code
4. commit the changes
5. push the changes to the remote repository
6. create a pull request 
7. merge the pull request
8. pull the merged changes to your local main repository   (git pull = git fetch + git merge)
9. repeart from step 2 or delete the branch (optional) 


          local repository | remote repository 
main                       | 
branch1                    | 
branch2                    | 


//// merge conflict /////
lets go step by step 
1.) there is a file which is modified in branch1 and pushed to remote repository
2.) now there is a branch2 which is modified the same file in different way and pushed to remote repository
3.) we created a pull request in both branches
4.) now lets say we merged branch2 to main
5.)now when we try to merge branch1 to main, git will not be able to merge the file because of the conflict
6.) git will show the conflict and we need to resolve it manually




merge conflict is when two branches have different changes to the same file and git cannot automatically merge them.

steps to resolve merge conflict
1.)lets say brnach1 and branch2 are modified the same readme file in different way and pushed to their respective remote repositories
2.)now we raise a pull request in both branches to main branch
3.)now lets say we merged branch2 to main
4.)now when we try to merge branch1 to main, git will not be able to merge the file because of the conflict
5.) git will show the conflict and we need to resolve it manually
6.)go to main branch and pull latest changes from remote repository that u merged with branch2
7.)ur main branch is now updated with branch2 changes
8.)now go to branch1 and merge main branch to branch1 by using git merge main
9)now u can solve the conflict by comparing the changes in both files and resolving the conflict(u can accept branch1 changes or branch2 changes or solve it manually)
10.)after solving the conflict, u need to add the file to staging area by using git add <file_name>
11.)now u need to commit the changes by using git commit -m "commit_message"
12.)now u can push the changes to the remote repository branch1 by using git push origin <branch_name>
13.)the merge conflict is now resolved and u can delete the branch1 by using git branch -d branch1






